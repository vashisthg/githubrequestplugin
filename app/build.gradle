import org.apache.http.HttpResponse
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpGet

buildscript {
    repositories {
        jcenter()
        maven {url "file://${projectDir}/../plugin/build/m2repo" }
    }
    dependencies {
        classpath 'com.vashisthg:githubstatus:0.1.0'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.5.2'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.vashisthg.githubstatus'

android {
    compileSdkVersion 21
    buildToolsVersion "21.0.2"

    defaultConfig {
        applicationId "com.vashisthg.githubstatus"
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    productFlavors {
        free {
            ext.enableGithubStatus = true;
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])


}


githubstatus {
    token = "c8edd09cc8c4e189b43a2f72f910ff0287cc98d5"
}

















class GithubStatusPlugin implements Plugin<Project> {
    void apply(Project project) {

        project.extensions.create("githubstatus", GithubStatusExtension)
        // TODO known limitation if there is no Flavours the plugin will not apply to default src/main
        project.afterEvaluate {
            project.android.productFlavors.all { flavour ->
                if (flavour.hasProperty("enableGithubStatus") && !flavour.ext.enableGithubStatus) return

                def dynamicTaskName = "githubStatus${flavour.name}"

                project.tasks.find {
                    def pattern = ~/(?i)dex${flavour.name}.*/
                    pattern.matcher(it.name).matches()
                }?.dependsOn project.tasks.create([name: "$dynamicTaskName", type: GithubStatusTask], {
                    flavor = flavour.name
                })
            }
        }
    }
}


class GithubStatusExtension {
    String fileName = "about" //default value
    String fileExtension = "properties"
}


//import java.io.*
//import groovyx.net.http.HTTPBuilder
//import groovyx.net.http.EncoderRegistry
//import static groovyx.net.http.Method.*
//import static groovyx.net.http.ContentType.*
//import org.apache.http.client.methods.HttpGet
//import org.apache.http.impl.client.HttpClientBuilder
//import org.apache.http.client.config.RequestConfig
//import org.apache.http.HttpHost
//import org.apache.http.HttpResponse
//import org.apache.http.client.HttpClient


class GithubStatusTask extends DefaultTask {
    @Input
    String flavor

    @TaskAction
    def exec() {
        println "in exec"

        setStatus()
    }

    @Input
    String getCommit() {
        "git rev-parse HEAD".execute([], project.rootDir).text.trim()
    }

    @Input
    String getAuthor() {
        "git log --format=%an -n 1 HEAD".execute([], project.rootDir).text.trim()
    }


    def void setStatus() {

//        RequestConfig.Builder requestBuilder = RequestConfig.custom()
//        requestBuilder = requestBuilder.setConnectTimeout(20000)
//        requestBuilder = requestBuilder.setConnectionRequestTimeout(20000)
//
//        HttpClientBuilder builder = HttpClientBuilder.create();
//        builder.setDefaultRequestConfig(requestBuilder.build());
//        HttpClient httpClient = builder.build();
//
//        HttpGet httpGet = new HttpGet("https://api.github.com")
//        httpGet.addHeader("Authorization", "token ###")
//
//        HttpResponse response = httpClient.execute(httpGet)
//
//        if(response.getStatusLine().getStatusCode() == 200) {
//            println "200 response"
//        } else {
//            throw new IllegalStateException("File upload failed: " + response.getStatusLine().getStatusCode() + " " + response.getStatusLine().getReasonPhrase());
//        }





//        def http = new groovyx.net.http.HTTPBuilder("https://api.github.com")
//        http.request(GET, JSON) { req ->
//
//            req.header [
//                "User-Agent: Apache HttpClient",
//                "Authorization: token ###"
//            ]
//            req.body {
//
//            }
//            response.success = { resp, reader ->
//                println "$resp.statusLine   Respond rec"
//
//            }
//        }


//        def p = [
//                'curl',
//                '-h', '"token #"',
//                '-d', '"{ "state": "failure", "target_url": "https://example.com/build/status", "description": "The build succeeded!", "context": "continuous-integration/test-status" }"',
//                "\"https://api.github.com/repos/Fueled/afterlight-android/statuses/###\""].execute()
//        def json = new JsonSlurper().parseText(p.text)

    }
}